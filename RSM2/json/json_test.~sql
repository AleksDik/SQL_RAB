
declare
  obj json;
  p_in varchar2(1000) :=
   /* '{"params":[{"pname":"p1","pval":234},{"pname":"p_id","pval":345},{"pname":"pstr","pval":"тестовая строка, тест"},{"pname":"pq","pval":2.34}]}';*/

'{
  "func" : {"ftype" : "procedure",
             "fpkg" : "",
             "fname": "set_xxxx",
             "params": [{"pname":"p2","pval":234},{"pname":"p_id","pval":345},{"pname":"pstr","pval":"тестовая строка, тест"},{"pname":"pq","pval":2.34}]
             } ,
  "func1" : {"ftype" : "function",
             "fpkg" : "",
             "fname": "get_x",
             "params": [{"pname":"p1","pval":234},{"pname":"p_id","pval":345},{"pname":"pstr","pval":"тестовая строка, тест"},{"pname":"pq","pval":2.54}]
             } 
}';
c integer;
i integer;
j integer;
 jv json_value;
 JL json_list;
 JO json;
 vn number;
begin
 jv := PKG_K3_UTILS.get_json_value_from_obj(p_in ,'ftype');
 
jv.print;
 
 --p_in :=json_ac.jv_to_char( jv,false);
 --dbms_output.put_line('OUT     '||p_in);   
 
 return;
 -------------------------------
  obj := json();
  obj := json(p_in);
  c:=obj.count;
  dbms_output.put_line('c='||c);
For i in 1..c 
loop  
 jv := obj.get(i);

 if  json_ac.jv_is_object(jv) then
     JO:=json(jv);
     p_in := json_ac.object_to_char(JO,false);
    -- jv := get_json_value_from_obj(p_in,p_value_name);
    -- JO.print;
     --  j:=jo.count;
     --  dbms_output.put_line('j='||j);
       dbms_output.put_line(p_in);
  elsif json_ac.jv_is_array(jv) then
        JL :=  json_list(jv);
        p_in := json_ac.array_to_char(JL,false);
         -- jv := get_json_value_from_list(p_in,p_value_name); 
        dbms_output.put_line(p_in);
  elsif json_ac.jv_is_array(jv) then   
    p_in := json_ac.jv_get_type(jv); 
     dbms_output.put_line(p_in);   
 end if;
 
 
end loop; 
 return;
obj :=json(jv);
--obj.print;

jv := obj.get('params');
JL :=  json_list(jv);
--dbms_output.put_line(JL.count);
jv := jl.get(4);
 obj := json(jv);

jv := obj.get('pval');
if json_ac.jv_is_number(jv) then
  vn := json_ac.jv_get_number(jv);
  dbms_output.put_line('vn='||vn);
elsif
   json_ac.jv_is_string(jv) then  
p_in :=json_ac.jv_get_string(jv);
--json_ac.jv_get_type(jv);
--p_in := json_ext.get_string(obj);
-- := json(jv);
--dbms_output.put_line(jv.get_string);
--p_in := json_ext.get_string(obj,'pval');
dbms_output.put_line(p_in);
end if;

exception 
  when OTHERS then--SQLERRM||' ; '||
    dbms_output.put_line( DBMS_UTILITY.FORMAT_ERROR_STACK || ' BACKTRACE: '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
end;


/*
SELECT  A.PACKAGE_NAME, A.OBJECT_NAME, A.ARGUMENT_NAME, A.DATA_TYPE,a.in_out, a.SEQUENCE
FROM USER_ARGUMENTS A
    ,ALL_OBJECTS    O
WHERE A.OBJECT_ID = O.OBJECT_ID
      AND O.OBJECT_NAME = 'PKG_K3_UTILS'      -- pkg
      AND A.OBJECT_NAME = 'GET_COUNT_KPU' -- procedure
      order by a.SEQUENCE;

*/



